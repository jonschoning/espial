{
  "version": 3,
  "sources": ["../../.spago/p/console-6.1.0/src/Effect/Class/Console.purs", "../../src/Component/BMark.purs", "../../src/Component/BList.purs", "../../src/Component/TagCloud.purs", "../../src/Bookmarks.purs"],
  "sourcesContent": ["module Effect.Class.Console where\n\nimport Control.Bind (discard, bind, pure)\nimport Data.Function ((<<<))\nimport Data.Show (class Show)\nimport Data.Unit (Unit)\nimport Effect.Class (class MonadEffect, liftEffect)\nimport Effect.Console as EffConsole\n\nlog :: forall m. MonadEffect m => String -> m Unit\nlog = liftEffect <<< EffConsole.log\n\nlogShow :: forall m a. MonadEffect m => Show a => a -> m Unit\nlogShow = liftEffect <<< EffConsole.logShow\n\nwarn :: forall m. MonadEffect m => String -> m Unit\nwarn = liftEffect <<< EffConsole.warn\n\nwarnShow :: forall m a. MonadEffect m => Show a => a -> m Unit\nwarnShow = liftEffect <<< EffConsole.warnShow\n\nerror :: forall m. MonadEffect m => String -> m Unit\nerror = liftEffect <<< EffConsole.error\n\nerrorShow :: forall m a. MonadEffect m => Show a => a -> m Unit\nerrorShow = liftEffect <<< EffConsole.errorShow\n\ninfo :: forall m. MonadEffect m => String -> m Unit\ninfo = liftEffect <<< EffConsole.info\n\ninfoShow :: forall m a. MonadEffect m => Show a => a -> m Unit\ninfoShow = liftEffect <<< EffConsole.infoShow\n\ndebug :: forall m. MonadEffect m => String -> m Unit\ndebug = liftEffect <<< EffConsole.debug\n\ndebugShow :: forall m a. MonadEffect m => Show a => a -> m Unit\ndebugShow = liftEffect <<< EffConsole.debugShow\n\ntime :: forall m. MonadEffect m => String -> m Unit\ntime = liftEffect <<< EffConsole.time\n\ntimeLog :: forall m. MonadEffect m => String -> m Unit\ntimeLog = liftEffect <<< EffConsole.timeLog\n\ntimeEnd :: forall m. MonadEffect m => String -> m Unit\ntimeEnd = liftEffect <<< EffConsole.timeEnd\n\nclear :: forall m. MonadEffect m => m Unit\nclear = liftEffect EffConsole.clear\n\ngroup :: forall m. MonadEffect m => String -> m Unit\ngroup = liftEffect <<< EffConsole.group\n\ngroupCollapsed :: forall m. MonadEffect m => String -> m Unit\ngroupCollapsed = liftEffect <<< EffConsole.groupCollapsed\n\ngroupEnd :: forall m. MonadEffect m => m Unit\ngroupEnd = liftEffect EffConsole.groupEnd\n\ngrouped :: forall m a. MonadEffect m => String -> m a -> m a\ngrouped name inner = do\n  group name\n  result <- inner\n  groupEnd\n  pure result\n", "module Component.BMark where\n\nimport Prelude hiding (div)\n\nimport Affjax (printError)\nimport Affjax.StatusCode (StatusCode(..))\nimport App (StarAction(..), destroy, editBookmark, markRead, toggleStar, lookupTitle)\nimport Component.Markdown as Markdown\nimport Data.Const (Const)\nimport Data.Either (Either(..))\nimport Data.Lens (Lens', lens, use, (%=), (.=))\nimport Data.Maybe (Maybe(..), fromMaybe, isJust)\nimport Data.Monoid (guard)\nimport Data.Nullable (toMaybe)\nimport Data.String (null, split, take, replaceAll) as S\nimport Data.String.Pattern (Pattern(..), Replacement(..))\nimport Effect.Aff (Aff)\nimport Effect.Class (liftEffect)\nimport Effect.Class.Console (log)\nimport Globals (app', setFocus, toLocaleDateString)\nimport Halogen as H\nimport Halogen.HTML (a, br_, button, div, div_, form, input, label, span, text, textarea)\nimport Halogen.HTML as HH\nimport Halogen.HTML.Events (onSubmit, onValueChange, onChecked, onClick)\nimport Halogen.HTML.Properties (ButtonType(..), InputType(..), autocomplete, checked, disabled, for, href, id, name, required, rows, target, title, type_, value)\nimport Model (Bookmark)\nimport Type.Proxy (Proxy(..))\nimport Util (attr, class_, encodeTag, fromNullableStr, ifElseH, whenA, whenH)\nimport Web.Event.Event (Event, preventDefault)\nimport DOM.HTML.Indexed.AutocompleteType (AutocompleteType(..))\n\n-- | UI Events\ndata BAction\n  = BStar Boolean\n  | BDeleteAsk Boolean\n  | BLookupTitle\n  | BDestroy\n  | BEdit Boolean\n  | BEditField EditField\n  | BEditSubmit Event\n  | BMarkRead\n\n-- | FormField Edits\ndata EditField\n  = Eurl String\n  | Etitle String\n  | Edescription String\n  | Etags String\n  | Eprivate Boolean\n  | Etoread Boolean\n\n-- | Messages to parent\ndata BMessage\n  = BNotifyRemove\n\ntype BSlot = H.Slot (Const Void) BMessage\n\ntype BState =\n  { bm :: Bookmark\n  , edit_bm :: Bookmark\n  , deleteAsk:: Boolean\n  , edit :: Boolean\n  , loading :: Boolean\n  , apiError :: Maybe String\n  }\n\n_bm :: Lens' BState Bookmark\n_bm = lens _.bm (_ { bm = _ })\n\n_edit_bm :: Lens' BState Bookmark\n_edit_bm = lens _.edit_bm (_ { edit_bm = _ })\n\n_edit :: Lens' BState Boolean\n_edit = lens _.edit (_ { edit = _ })\n\n_apiError :: Lens' BState (Maybe String)\n_apiError = lens _.apiError (_ { apiError = _ })\n\n_markdown = Proxy :: Proxy \"markdown\"\n\ntype ChildSlots =\n  ( markdown :: Markdown.Slot Unit\n  )\n\nbmark :: forall q i. Bookmark -> H.Component q i BMessage Aff\nbmark b' =\n  H.mkComponent\n    { initialState: const (mkState b')\n    , render\n    , eval: H.mkEval $ H.defaultEval { handleAction = handleAction }\n    }\n  where\n  app = app' unit\n\n  mkState b =\n    { bm: b\n    , edit_bm: b\n    , deleteAsk: false\n    , edit: false\n    , loading: false\n    , apiError: Nothing\n    }\n\n  render :: BState -> H.ComponentHTML BAction ChildSlots Aff\n  render s@{ bm, edit_bm, apiError } =\n    div [ id (show bm.bid) , class_ (\"bookmark w-100 mw7 pa1 mb3\" <> guard bm.private \" private\")] $\n      [ whenH app.dat.isowner\n          star\n      , ifElseH s.edit\n          display_edit\n          display\n      ]\n\n    where\n\n     star _ =\n       div [ class_ (\"star fl pointer\" <> guard bm.selected \" selected\") ]\n       [ button [ class_ \"moon-gray\", onClick \\_ -> BStar (not bm.selected) ] [ text \"\u272D\" ] ]\n\n     display _ =\n        div [ class_ \"display\" ] $\n        [ a [ href bm.url, target \"_blank\", class_ (\"link f5 lh-title\" <> guard bm.toread \" unread\")]\n          [ text $ if S.null bm.title then \"[no title]\" else bm.title ]\n        , br_\n        , a [ href bm.url , class_ \"link f7 gray hover-blue\" ] [ text bm.url ]\n        , a [ href (fromMaybe (\"http://archive.is/\" <> bm.url) (toMaybe bm.archiveUrl))\n            , class_ (\"link f7 gray hover-blue ml2\" <> (guard (isJust (toMaybe bm.archiveUrl)) \" green\"))\n            , target \"_blank\", title \"archive link\"]\n            [ if isJust (toMaybe bm.archiveUrl) then text \"\u2611\" else text \"\u2610\" ]\n        , br_\n        , div [ class_ \"description mt1 mid-gray\" ] [ HH.slot _markdown unit Markdown.component bm.description absurd ]\n        , div [ class_ \"tags\" ] $\n              whenA (not (S.null bm.tags)) $ \\_ ->\n                map (\\tag -> a [ class_ (\"link tag mr1\" <> guard (S.take 1 tag == \".\") \" private\")\n                             , href (linkToFilterTag tag) ]\n                             [ text tag ])\n                (S.split (Pattern \" \") bm.tags)\n              \n        , a [ class_ \"link f7 dib gray w4\", href (linkToFilterSingle bm.slug), title shdatetime ]\n          [ text shdate ]\n\n        -- links\n        , whenH app.dat.isowner $ \\_ ->\n            div [ class_ \"edit_links di\" ]\n            [ button [ type_ ButtonButton, onClick \\_ -> BEdit true, class_ \"edit light-silver hover-blue\" ] [ text \"edit\u00A0\u00A0\" ]\n            , div [ class_ \"delete_link di\" ]\n              [ button [ type_ ButtonButton, onClick \\_ -> BDeleteAsk true, class_ (\"delete light-silver hover-blue\" <> guard s.deleteAsk \" dn\") ] [ text \"delete\" ]\n              , span ([ class_ (\"confirm red\" <> guard (not s.deleteAsk) \" dn\") ] )\n                [ button [ type_ ButtonButton, onClick \\_ -> BDeleteAsk false] [ text \"cancel\u00A0/\u00A0\" ]\n                , button [ type_ ButtonButton, onClick \\_ -> BDestroy, class_ \"red\" ] [ text \"destroy\" ]\n                ] \n              ]\n            ]\n        , whenH app.dat.isowner $ \\_ ->\n            div [ class_ \"read di\" ] $\n              guard bm.toread\n              [ text \"\u00A0\u00A0\"\n              , button [ onClick \\_ -> BMarkRead, class_ \"mark_read\" ] [ text \"mark as read\"]\n              ]\n        ]\n       \n\n     display_edit _ =\n       div [ class_ \"edit_bookmark_form pa2 pt0 bg-white\" ] $\n       [ whenH (isJust apiError)\n              (alert_notification (fromMaybe \"\" apiError))\n       , form [ onSubmit BEditSubmit ]\n         [ div_ [ text \"url\" ]\n         , input [ type_ InputUrl , class_ \"url w-100 mb2 pt1 edit_form_input\" , required true , name \"url\"\n                 , value (edit_bm.url) , onValueChange (editField Eurl) ]\n         , div_ [ text \"title\" ]\n         , div [class_ \"flex\"]\n               [input [ type_ InputText , class_ \"title w-100 mb2 pt1 edit_form_input\" , name \"title\"\n                      , value (edit_bm.title) , onValueChange (editField Etitle) ]\n               , button [ disabled s.loading, type_ ButtonButton, onClick \\_ -> BLookupTitle, class_ (\"ml1 pa1 mb2 dark-gray ba b--moon-gray bg-near-white pointer rdim f7 \" <> guard s.loading \"bg-light-silver\") ] [ text \"fetch\" ]\n               ]\n         , div_ [ text \"description\" ]\n         , textarea [ class_ \"description w-100 mb1 pt1 edit_form_input\" , name \"description\", rows 5\n                    , value (edit_bm.description) , onValueChange (editField Edescription) ]\n         , div [ id \"tags_input_box\"]\n           [ div_ [ text \"tags\" ]\n             , input [ id (tagid edit_bm), type_ InputText , class_ \"tags w-100 mb1 pt1 edit_form_input\" , name \"tags\"\n                     , autocomplete AutocompleteOff, attr \"autocapitalize\" \"off\"\n                     , value (edit_bm.tags) , onValueChange (editField Etags) ]\n           ]\n         , div [ class_ \"edit_form_checkboxes mv3\"]\n           [ input [ type_ InputCheckbox , class_ \"private pointer\" , id \"edit_private\", name \"private\"\n                   , checked (edit_bm.private) , onChecked (editField Eprivate) ]\n           , text \" \"\n           , label [ for \"edit_private\" , class_ \"mr2\" ] [ text \"private\" ]\n           , text \" \"\n           , input [ type_ InputCheckbox , class_ \"toread pointer\" , id \"edit_toread\", name \"toread\"\n                   , checked (edit_bm.toread) , onChecked (editField Etoread) ]\n           , text \" \"\n           , label [ for \"edit_toread\" ] [ text \"to-read\" ]\n           ]\n         , input [ type_ InputSubmit , class_ \"mr1 pv1 ph2 dark-gray ba b--moon-gray bg-near-white pointer rdim\" , value \"save\" ]\n         , text \" \"\n         , input [ type_ InputReset , class_ \"pv1 ph2 dark-gray ba b--moon-gray bg-near-white pointer rdim\" , value \"cancel\"\n                 , onClick \\_ -> BEdit false ]\n         ]\n       ]\n       \n     alert_notification alert_text _ = \n       div [ class_ \"alert alert-err\" ] [ text alert_text ]\n\n     editField :: forall a. (a -> EditField) -> a -> BAction\n     editField f = BEditField <<< f\n     linkToFilterSingle slug = fromNullableStr app.userR <> \"/b:\" <> slug\n     linkToFilterTag tag = fromNullableStr app.userR <> \"/t:\" <> encodeTag tag \n     shdate = toLocaleDateString bm.time \n     shdatetime = S.take 16 bm.time `append` \"Z\"\n\n  tagid bm = show bm.bid <> \"_tags\"\n\n  handleAction :: BAction -> H.HalogenM BState BAction ChildSlots BMessage Aff Unit\n\n  -- | Star\n  handleAction (BStar e) = do\n    bm <- use _bm\n    H.liftAff (toggleStar bm.bid (if e then Star else UnStar))\n    _bm %= _ { selected = e }\n    _edit_bm %= _ { selected = e }\n\n  -- | Delete\n  handleAction (BDeleteAsk e) = do\n    H.modify_ (_ { deleteAsk = e })\n\n  -- | Destroy\n  handleAction (BDestroy) = do\n    bm <- use _bm\n    void $ H.liftAff (destroy bm.bid)\n    H.raise BNotifyRemove\n\n  -- | Mark Read\n  handleAction (BMarkRead) = do\n    bm <- use _bm\n    void (H.liftAff (markRead bm.bid))\n    _bm %= _ { toread = false }\n\n  -- | Start/Stop Editing\n  handleAction (BEdit e) = do\n    bm <- use _bm\n    _edit_bm .= bm\n    _edit .= e\n    _apiError .= Nothing\n    H.liftEffect $\n      when e\n        (setFocus (tagid bm)) \n\n  -- | Update Form Field \n  handleAction (BEditField f) = do\n    _edit_bm %= case f of\n      Eurl e -> _ { url = e }\n      Etitle e -> _ { title = e }\n      Edescription e -> _ { description = e }\n      Etags e -> _ { tags = e }\n      Eprivate e -> _ { private = e }\n      Etoread e -> _ { toread = e }\n\n  -- | Lookup Title\n  handleAction BLookupTitle = do\n    H.modify_ (_ { loading = true })\n    edit_bm <- H.gets _.edit_bm\n    mtitle <- H.liftAff $ lookupTitle edit_bm\n    case mtitle of\n      Just title' -> _edit_bm %= (_ { title = title' })\n      Nothing -> pure $ unit\n    H.modify_ (_ { loading = false })\n\n  -- | Submit\n  handleAction (BEditSubmit e) = do\n    H.liftEffect (preventDefault e)\n    edit_bm <- use _edit_bm\n    _apiError .= Nothing\n    let edit_bm' = edit_bm { tags = S.replaceAll (Pattern \",\") (Replacement \" \") edit_bm.tags }\n    H.liftAff (editBookmark edit_bm') >>= case _ of\n      Left affErr -> do\n        _apiError .= Just (printError affErr)\n        liftEffect $ log (printError affErr)\n      Right { status: StatusCode s } | s >= 200 && s < 300 -> do\n        _bm .= edit_bm'\n        _edit .= false\n      Right res -> do\n        _apiError .= Just (res.body)\n        liftEffect $ log (res.body)\n", "module Component.BList where\n\nimport Prelude\n\nimport Component.BMark (BMessage(..), BSlot, bmark)\nimport Model (Bookmark, BookmarkId)\n\nimport Data.Array (filter)\nimport Effect.Aff (Aff)\nimport Halogen as H\nimport Halogen.HTML as HH\nimport Type.Proxy (Proxy(..))\n\ndata LAction =\n  HandleBMessage BookmarkId BMessage\n\ntype ChildSlots =\n  ( bookmark :: BSlot Int\n  )\n\n_bookmark = Proxy :: Proxy \"bookmark\"\n\nblist :: forall q i o. Array Bookmark -> H.Component q i o Aff\nblist st =\n  H.mkComponent\n    { initialState: const st\n    , render\n    , eval: H.mkEval $ H.defaultEval { handleAction = handleAction }\n    }\n  where\n\n  render :: Array Bookmark -> H.ComponentHTML LAction ChildSlots Aff\n  render bms =\n    HH.div_ $ map (\\b -> HH.slot _bookmark b.bid (bmark b) unit (HandleBMessage b.bid)) bms\n\n  handleAction :: LAction -> H.HalogenM (Array Bookmark) LAction ChildSlots o Aff Unit\n  handleAction (HandleBMessage bid BNotifyRemove) = do\n    H.modify_ (filter (\\b -> b.bid /= bid))\n", "module Component.TagCloud where\n\nimport Prelude hiding (div)\n\nimport App (getTagCloud, updateTagCloudMode)\nimport Data.Array (concat, cons, delete, notElem, null, sortBy)\nimport Data.Foldable (maximum, minimum)\nimport Data.Int (toNumber)\nimport Data.Lens (Lens', lens)\nimport Data.Maybe (Maybe(..), fromMaybe)\nimport Data.Monoid (guard)\nimport Data.String (joinWith, toLower, null) as S\nimport Data.String (toLower)\nimport Data.Tuple (fst, uncurry)\nimport Effect.Aff (Aff)\nimport Foreign.Object (Object)\nimport Foreign.Object (toUnfoldable, empty, values) as F\nimport Globals (app')\nimport Halogen (AttrName(..))\nimport Halogen as H\nimport Halogen.HTML (HTML, a, attr, button, div, text)\nimport Halogen.HTML.Events (onClick)\nimport Halogen.HTML.Properties (ButtonType(..), href, title, type_)\nimport Data.Number (log)\nimport Model (TagCloud, TagCloudModeF(..), isExpanded, isRelated, setExpanded, tagCloudModeFromF)\nimport Util (class_, encodeTag, fromNullableStr, ifElseA, whenH)\n\ndata TAction\n  = TInitialize\n  | TExpanded Boolean\n  | TChangeMode TagCloudModeF\n\ntype TState =\n  { mode :: TagCloudModeF\n  , tagcloud :: TagCloud\n  }\n\n_mode :: Lens' TState TagCloudModeF\n_mode = lens _.mode (_ { mode = _ })\n\ntagcloudcomponent :: forall q i o. TagCloudModeF -> H.Component q i o Aff\ntagcloudcomponent m' =\n  H.mkComponent\n    { initialState: const (mkState m')\n    , render\n    , eval: H.mkEval $ H.defaultEval { handleAction = handleAction\n                                     , initialize = Just TInitialize\n                                     }\n    }\n  where\n  app = app' unit\n  mkState m =\n    { mode: m\n    , tagcloud: F.empty\n    }\n\n  render :: TState -> H.ComponentHTML TAction () Aff\n  render { mode:TagCloudModeNone } =\n    div [class_ \"tag_cloud\" ] []\n  render { mode, tagcloud } =\n    div [class_ \"tag_cloud mv3\" ] \n    [\n      div [class_ \"tag_cloud_header mb2\"] $\n          ifElseA (isRelated mode)\n            (\\_ -> do --RELATED\n              [ button [ type_ ButtonButton, class_ (\"pa1 f7 link hover-blue mr1 b\")\n                       , onClick \\_ -> TExpanded (not (isExpanded mode))\n                       ] [text \"Related Tags\"]\n              ]\n            ) \n            (\\_ -> do -- NOT RELATED\n              [ button [ type_ ButtonButton, class_ (\"pa1 f7 link hover-blue mr1\" <> guard (mode == modetop) \" b\")\n                       , title \"show a cloud of your most-used tags\"\n                       , onClick \\_ -> TChangeMode modetop\n                       ] [text \"Top Tags\"]\n              , button [ type_ ButtonButton, class_ (\"pa1 f7 link hover-blue ml2 \" <> guard (mode == modelb1) \" b\") \n                       , title \"show all tags\"\n                       , onClick \\_ -> TChangeMode modelb1\n                       ] [text \"all\"] \n              , text \"\u2027\"\n              , button [ type_ ButtonButton, class_ (\"pa1 f7 link hover-blue\" <> guard (mode == modelb2) \" b\") \n                       , title \"show tags with at least 2 bookmarks\"\n                       , onClick \\_ -> TChangeMode modelb2\n                       ] [text \"2\"]\n              , text \"\u2027\"\n              , button [ type_ ButtonButton, class_ (\"pa1 f7 link hover-blue\" <> guard (mode == modelb5) \" b\") \n                       , title \"show tags with at least 5 bookmarks\"\n                       , onClick \\_ -> TChangeMode modelb5\n                       ] [text \"5\"]\n              , text \"\u2027\"\n              , button [ type_ ButtonButton, class_ (\"pa1 f7 link hover-blue\" <> guard (mode == modelb10) \" b\") \n                       , title \"show tags with at least 10 bookmarks\"\n                       , onClick \\_ -> TChangeMode modelb10\n                       ] [text \"10\"]\n              , text \"\u2027\"\n              , button [ type_ ButtonButton, class_ (\"pa1 f7 link hover-blue\" <> guard (mode == modelb20) \" b\") \n                       , title \"show tags with at least 20 bookmarks\"\n                       , onClick \\_ -> TChangeMode modelb20\n                       ] [text \"20\"]\n              ])\n              <> [button [ type_ ButtonButton, class_ \"pa1 ml2 f7 link silver hover-blue \"\n                         , onClick \\_ -> TExpanded (not (isExpanded mode))]\n                         [ text (if isExpanded mode then \"hide\" else \"show\") ]]\n    , whenH (isExpanded mode) \\_ -> do\n        let n = fromMaybe 1 (minimum (F.values tagcloud))\n            m = fromMaybe 1 (maximum (F.values tagcloud))\n        div [class_ \"tag_cloud_body\"] $ case mode of\n          TagCloudModeNone -> []\n          (TagCloudModeRelated _ curtags) -> \n            toArray curtags n m tagcloud\n          _ -> \n            toArray [] n m tagcloud\n          \n    ]\n    where\n      modetop = TagCloudModeTop (isExpanded mode) 200\n      modelb1 = TagCloudModeLowerBound (isExpanded mode) 1\n      modelb2 = TagCloudModeLowerBound (isExpanded mode) 2\n      modelb5 = TagCloudModeLowerBound (isExpanded mode) 5\n      modelb10 = TagCloudModeLowerBound (isExpanded mode) 10\n      modelb20 = TagCloudModeLowerBound (isExpanded mode) 20\n\n\n  toArray :: Array String -> Int -> Int -> Object Int -> Array (HTML _ _)\n  toArray curtags n m =\n    concat\n    <<< map (uncurry (toSizedTag (map toLower curtags) n m))\n    <<< sortBy (comparing (S.toLower <<< fst))\n    <<< F.toUnfoldable\n\n  linkToFilterTag rest = fromNullableStr app.userR <> (if S.null rest then \"\" else \"/t:\" <> rest) \n\n  toSizedTag :: Array String -> Int -> Int -> String -> Int -> _\n  toSizedTag curtags n m k v =\n    [ a [ href (linkToFilterTag (encodeTag k)), class_ \"link tag mr1\" , style] \n        [ text k ]\n      , whenH (not (null curtags))  \\_ -> if (notElem k_lower curtags)\n          then a [href (linkToFilterTag (S.joinWith \"+\" (map encodeTag (cons k_lower curtags)))), class_ \"link mr2 tag-include\"] [text \"\u2295\"]\n          else a [href (linkToFilterTag (S.joinWith \"+\" (map encodeTag (delete k_lower curtags)))), class_ \"link mr2 tag-exclude\"] [text \"\u2296\"]\n    ]\n    where\n      k_lower = toLower k\n      fontsize = rescale identity (toNumber v) (toNumber n) (toNumber m) 100.0 150.0\n      opacity = rescale (log <<< (1.0 + _)) (toNumber v) (toNumber n) (toNumber m) 0.6 1.0\n      style = attr (AttrName \"style\") (\"font-size:\" <> show fontsize <> \"%\" <> \";opacity:\" <> show opacity)\n\n  rescale :: (Number -> Number) -> Number -> Number -> Number -> Number -> Number -> Number\n  rescale f v n m l h = (if m - n < 0.01 then 1.0 else (f (v - n) / f (m - n))) * (h - l) + l\n\n  fetchTagCloud :: TagCloudModeF -> H.HalogenM TState TAction () o Aff Unit\n  fetchTagCloud mode' = do\n    case mode' of\n      TagCloudModeNone -> pure unit\n      _ -> do\n        tagcloud <- H.liftAff $ getTagCloud (tagCloudModeFromF mode')\n        H.modify_ (\\s -> s { \n          mode = mode',\n          tagcloud = fromMaybe F.empty tagcloud\n        })\n  \n  handleAction :: TAction -> H.HalogenM TState TAction () o Aff Unit\n  handleAction TInitialize = do\n    mode <- H.gets _.mode\n    fetchTagCloud mode\n  handleAction (TExpanded expanded) = do\n    H.modify_ (\\s -> s { mode = setExpanded s.mode expanded })\n    mode <- H.gets _.mode\n    void $ H.liftAff $ updateTagCloudMode (tagCloudModeFromF mode)\n  handleAction (TChangeMode mode') = do\n    mode <- H.gets _.mode\n    if mode == mode'\n       then handleAction (TExpanded (not (isExpanded mode)))\n       else fetchTagCloud (setExpanded mode' true)\n", "module Bookmarks where\n\nimport Prelude\n\nimport Component.TagCloud (tagcloudcomponent)\nimport Component.BList (blist)\nimport Data.Foldable (traverse_)\nimport Effect (Effect)\nimport Halogen.Aff as HA\nimport Halogen.VDom.Driver (runUI)\nimport Model (Bookmark, TagCloudMode, tagCloudModeToF)\nimport Web.DOM.ParentNode (QuerySelector(..))\nimport ViewRendered (viewRendered)\n\n\nrenderBookmarks :: String -> Array Bookmark -> Effect Unit\nrenderBookmarks renderElSelector bmarks = do\n  HA.runHalogenAff do\n    HA.selectElement (QuerySelector renderElSelector) >>= traverse_ \\el -> do\n      void $ runUI (blist bmarks) unit el\n      viewRendered\n\nrenderTagCloud :: String -> TagCloudMode -> Effect Unit\nrenderTagCloud renderElSelector tagCloudMode = do\n  HA.runHalogenAff do\n    HA.selectElement (QuerySelector renderElSelector) >>= traverse_ \\el -> do\n      void $ runUI (tagcloudcomponent (tagCloudModeToF tagCloudMode)) unit el"],
  "mappings": "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",
  "names": ["log", "dictMonadEffect", "$67", "liftEffect", "$68", "Eurl", "Etitle", "Edescription", "Etags", "Eprivate", "Etoread", "BNotifyRemove", "BStar", "BDeleteAsk", "BLookupTitle", "BDestroy", "BEdit", "BEditField", "BEditSubmit", "BMarkRead", "_markdown", "_edit_bm", "dictStrong", "v", "v1", "strongFn", "strongForget", "_edit", "_bm", "_apiError", "bmark", "b$prime", "tagid", "bm", "mkState", "b", "handleAction", "bind", "use", "_bm1", "UnStar", "modify_", "setFocus", "modifying", "_edit_bm1", "edit_bm", "mtitle", "Just", "Nothing", "discard", "liftEffect", "preventDefault", "edit_bm$prime", "Left", "assign", "_apiError1", "printError", "Right", "app", "app$prime", "render", "star", "class_", "guard", "button", "onClick", "v2", "text", "shdatetime", "take", "shdate", "toLocaleDateString", "linkToFilterTag", "tag", "encodeTag", "linkToFilterSingle", "slug", "editField", "f", "$126", "display", "a", "href", "target", "$121", "fromMaybe", "toMaybe", "isJust", "title", "$122", "slot", "component", "absurd", "div", "whenA", "$$null", "whenH", "type_", "ButtonButton", "v3", "span", "guard1", "alert_notification", "alert_text", "display_edit", "form", "onSubmit", "div_", "input", "type_1", "InputUrl", "required", "name", "value", "onValueChange", "InputText", "disabled", "textarea", "rows", "id", "autocomplete", "AutocompleteOff", "attr", "InputCheckbox", "checked", "onChecked", "label", "$$for", "InputSubmit", "InputReset", "show", "ifElseH", "HandleBMessage", "_bookmark", "blist", "st", "render", "bms", "b", "bmark", "handleAction", "v", "modify_", "filter", "TInitialize", "TExpanded", "TChangeMode", "tagcloudcomponent", "m$prime", "rescale", "f", "v", "n", "m", "l", "h", "$57", "mkState", "fetchTagCloud", "mode$prime", "TagCloudModeNone", "bind", "liftAff", "getTagCloud", "tagCloudModeFromF", "tagcloud", "s", "$60", "handleAction", "v1", "mode", "discard", "modify_", "$64", "gets", "$67", "isExpanded", "setExpanded", "app", "app$prime", "linkToFilterTag", "rest", "$69", "toSizedTag", "curtags", "k", "opacity", "$79", "toNumber", "k_lower", "toLower", "fontsize", "identity", "style", "attr", "show", "a", "href", "encodeTag", "class_", "text", "whenH", "$$null", "$70", "joinWith", "map", "cons", "$$delete", "toArray", "$80", "uncurry", "$81", "sortBy", "comparing", "$83", "$82", "toUnfoldable", "render", "modetop", "TagCloudModeTop", "modelb5", "TagCloudModeLowerBound", "modelb20", "modelb2", "modelb10", "modelb1", "div", "append1", "ifElseA", "isRelated", "button", "type_", "ButtonButton", "onClick", "v2", "guard", "eq", "title", "$73", "fromMaybe", "minimum", "values", "maximum", "TagCloudModeRelated", "renderTagCloud", "renderElSelector", "tagCloudMode", "traverse_", "el", "renderBookmarks", "bmarks"]
}
